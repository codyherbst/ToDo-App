{"version":3,"sources":["ToDoList.js","TodoApp.js","serviceWorker.js","index.js"],"names":["ToDoList","props","checked","this","items","map","item","key","id","status","type","name","onClick","updateStatus","className","htmlFor","text","removeItem","React","Component","TodoApp","state","localStorage","getItem","JSON","parse","myStorage","handleChange","bind","handleSubmit","handleClear","onSubmit","onChange","value","length","setItem","stringify","e","setState","target","preventDefault","newItem","Date","now","prevState","concat","persist","result","filter","clear","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTA6CeA,G,kBAzCX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,SAAU,EAFA,E,sEAKT,IAAD,OAEL,OACI,4BACKC,KAAKF,MAAMG,MAAMC,KAAI,SAAAC,GAAI,OACtB,wBAAIC,IAAKD,EAAKE,IACQ,SAAhBF,EAAKG,OAAoB,EAAKP,SAAU,EAAO,EAAKA,SAAU,EAChE,2BACIQ,KAAK,WACLC,KAAML,EAAKE,GACXA,GAAIF,EAAKE,GACTN,QAAS,EAAKA,QACdU,QAAS,EAAKX,MAAMY,aACpBC,UAAU,0BAEd,2BACIC,QAAST,EAAKE,GACdM,UAAU,SAETR,EAAKU,MAEV,4BACIR,GAAIF,EAAKE,GACTI,QAAS,EAAKX,MAAMgB,WACpBH,UAAU,eAHd,c,GA3BDI,IAAMC,YC4HdC,E,YAhHX,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,MAAQ,CACTjB,MAAOkB,aAAaC,QAAQ,YAAcC,KAAKC,MAAMH,aAAaC,QAAQ,aAAe,GACzFP,KAAM,IAEV,EAAKU,UAAYJ,aACjB,EAAKK,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKf,aAAe,EAAKA,aAAae,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKX,WAAa,EAAKA,WAAWW,KAAhB,gBAXH,E,sEAef,OACI,yBAAKd,UAAU,OACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,wBAAIA,UAAU,eAAd,QACA,0BAAMiB,SAAU5B,KAAK0B,aAAcf,UAAU,eACzC,2BACIC,QAAQ,WACRD,UAAU,QAFd,0BAMA,2BACIN,GAAG,WACHwB,SAAU7B,KAAKwB,aACfM,MAAO9B,KAAKkB,MAAML,OAEtB,4BAAQF,UAAU,QAAlB,QACUX,KAAKkB,MAAMjB,MAAM8B,OAAS,IAGxC,yBAAKpB,UAAU,QACX,kBAAC,EAAD,CAAUV,MAAOD,KAAKkB,MAAMjB,MAAOS,aAAcV,KAAKU,aAAcI,WAAYd,KAAKc,eAG7F,yBAAKH,UAAU,a,2CAMvBX,KAAKuB,UAAUS,QAAQ,WAAYX,KAAKY,UAAUjC,KAAKkB,MAAMjB,U,mCAGpDiC,GACTlC,KAAKmC,SAAS,CAAEtB,KAAMqB,EAAEE,OAAON,U,mCAGtBI,GAGT,GAFAA,EAAEG,iBAE6B,IAA3BrC,KAAKkB,MAAML,KAAKkB,OAApB,CAIA,IAAMO,EAAU,CACZzB,KAAMb,KAAKkB,MAAML,KACjBP,OAAQ,cACRD,GAAIkC,KAAKC,OAGbxC,KAAKmC,UAAS,SAAAM,GAAS,MAAK,CACxBxC,MAAOwC,EAAUxC,MAAMyC,OAAOJ,GAC9BzB,KAAM,U,4EAIKqB,G,wEACfA,EAAES,U,SAEI3C,KAAKmC,UAAS,SAAAM,GAAS,MAAK,CAC9BxC,MAAOwC,EAAUxC,MAAMC,KAAI,SAACC,GAQxB,OANIA,EAAKE,IAAM6B,EAAEE,OAAO/B,IAAsB,gBAAhBF,EAAKG,OAC/BH,EAAKG,OAAS,OACPH,EAAKE,IAAM6B,EAAEE,OAAO/B,IAAsB,SAAhBF,EAAKG,SACtCH,EAAKG,OAAS,eAGXH,S,iLAKF+B,G,8EACbA,EAAES,UACEC,EAAS5C,KAAKkB,MAAMjB,MAAM4C,QAAO,SAAC1C,GAElC,GAAIA,EAAKE,IAAM6B,EAAEE,OAAO/B,GACpB,OAAOF,K,SAMTH,KAAKmC,UAAS,SAAAM,GAAS,MAAK,CAC9BxC,MAAO2C,M,2IAMXzB,aAAa2B,Y,GA5GC/B,IAAMC,WCFR+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAaC,SAASC,eAAe,SD4H/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26502949.chunk.js","sourcesContent":["import React from 'react';\nimport './ToDoList.css';\n\nclass ToDoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.checked = false;\n    }\n\n    render() {\n\n        return (\n            <ul>\n                {this.props.items.map(item => (\n                    <li key={item.id}>\n                        {(item.status === 'done' ? this.checked = true : this.checked = false)}\n                        <input\n                            type='checkbox'\n                            name={item.id}\n                            id={item.id}\n                            checked={this.checked}\n                            onClick={this.props.updateStatus}\n                            className='float-left inputHover'\n                        />\n                        <label\n                            htmlFor={item.id}\n                            className='pl-3 '\n                        >\n                            {item.text}\n                        </label>\n                        <button\n                            id={item.id}\n                            onClick={this.props.removeItem}\n                            className='float-right'\n                        >\n                            X\n                        </button>\n                    </li>\n                ))\n                }\n            </ul>\n        );\n    }\n}\n\nexport default ToDoList;","import React from 'react'\nimport ToDoList from './ToDoList'\n\n//need to save input field as an object\n//      it will add in progress to status\n//      id will be current time to be used for list key\n//need to be able to set each one to done\n//      link each one to a checkbox\n//      this gives the option to undo a previously completed list\n//have three views\n//      first view will just show all of them\n//      second view will be uncompleted objects\n//      third view will be completed objects\n\nclass TodoApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: localStorage.getItem('toDoList') ? JSON.parse(localStorage.getItem('toDoList')) : [],\n            text: '',\n        };\n        this.myStorage = localStorage\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.updateStatus = this.updateStatus.bind(this);\n        this.handleClear = this.handleClear.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n    }\n    render() {\n\n        return (\n            <div className='row'>\n                <div className='col-4' />\n                <div className='col-4'>\n                    <h3 className='text-center'>TODO</h3>\n                    <form onSubmit={this.handleSubmit} className='text-center'>\n                        <label\n                            htmlFor=\"new-todo\"\n                            className='pr-1'\n                        >\n                            What needs to be done?\n                        </label>\n                        <input\n                            id=\"new-todo\"\n                            onChange={this.handleChange}\n                            value={this.state.text}\n                        />\n                        <button className='ml-3'>\n                            Add #{this.state.items.length + 1}\n                        </button>\n                    </form>\n                    <div className='pt-5'>\n                        <ToDoList items={this.state.items} updateStatus={this.updateStatus} removeItem={this.removeItem} />\n                    </div>\n                </div>\n                <div className='col-4' />\n            </div>\n        );\n    }\n\n    componentDidUpdate() {\n        this.myStorage.setItem('toDoList', JSON.stringify(this.state.items))\n    }\n\n    handleChange(e) {\n        this.setState({ text: e.target.value });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        if (this.state.text.length === 0) {\n            return;\n        }\n\n        const newItem = {\n            text: this.state.text,\n            status: 'in progress',\n            id: Date.now()\n        };\n\n        this.setState(prevState => ({\n            items: prevState.items.concat(newItem),\n            text: ''\n        }));\n    }\n\n    async updateStatus(e) {\n        e.persist();\n\n        await this.setState(prevState => ({\n            items: prevState.items.map((item) => {\n\n                if (item.id == e.target.id && item.status === 'in progress') {\n                    item.status = 'done'\n                } else if (item.id == e.target.id && item.status === 'done') {\n                    item.status = 'in progress'\n                }\n\n                return item;\n            })\n        }));\n    }\n\n    async removeItem(e) {\n        e.persist();\n        let result = this.state.items.filter((item) => {\n\n            if (item.id != e.target.id) {\n                return item;\n            }\n\n        });\n        // console.log({result})\n\n        await this.setState(prevState => ({\n            items: result\n        }));\n        // console.log(this.state.items)\n    }\n\n    handleClear() {\n        localStorage.clear();\n\n    }\n}\n\nexport default TodoApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport ToDoApp from './TodoApp'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<ToDoApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}